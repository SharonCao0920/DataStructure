/*
********************************************************************************************
 File Name: HW Assignment 1 Q1
 Author:    Sharon Cao
 Date:    1/16/2020
 Description: 
 Given a linked list, write a program to delete all elements with the value same as input
 argument key, such as input linked list a = "Head->1->2->1->3->NULL". After calling
 function Delete_LinkList_Node (a, 1), the new linked list will be "Head->2->3->NULL".
 Hint: take example programs as reference
 *******************************************************************************************
 */

#include <stdio.h>
#include <stdlib.h>

typedef int ElemType;

typedef  struct  Lnode
{   
    ElemType  data;   
    struct   Lnode  *next;     
}LNode;
      
LNode  *create_LinkList(void){    
  int data;
  LNode *head, *p, *q;
  head=p=(LNode *)malloc(sizeof(LNode)); 
  head->next=NULL;       
  do{ 
      scanf("%d",& data);
      q= (LNode  *)malloc(sizeof(LNode)); 
      q->data=data;     
      q->next=p->next;  
      p->next=q; 
      p=q ; 
  }while(getchar()!='\n');
  return (head);
}

void  Delete_LinkList_Node(LNode *L, int i){  
    int  j=0;  
    LNode *p,*q;
    p=L;  
    q=L->next;
    while( p->next!=NULL && j<i) {  
        p=q;  
        q=q->next;  
        j++;  
    }
    if(j!=i){
      printf("Out of range!\n");
      exit(0); 
    }
    else if(q==NULL){ 
        printf("i is too big\n");
        exit(0);
      }
    else{  
        p->next=q->next;   
        free(q);    
    }
}

void printList(LNode* list){
  printf("Head");
  while(1){
    printf("->");
    list = list->next;
    if(list == NULL){
      printf("NULL");
      exit(0);
    }
    else if(list->next == NULL) {
      printf("%d->NULL\n", list->data);
      break;
    }
    else 
      printf("%d",list->data);
  }
}
int main(void) {
  LNode *a;
  a = create_LinkList();
  printList(a);
  int n;
  printf("Please enter the index to delete: ");
  scanf("%d", &n);
  Delete_LinkList_Node(a, n);
  printList(a);
  return 0;
}

/*Sample Ouput
5 4 7 3 9 4 2
Head->5->4->7->3->9->4->2->NULL
Please enter the index to delete: 4
Head->5->4->7->3->4->2->NULL
*/





2. From a linked list, generate a program to delete all elements with the same value, such as
input linked list a = "Head->1->2->1->3->2->NULL". After calling function
Delete_Node_value(a), the new linked list will be "Head->3->NULL".




3. In a linked list, create a program to delete all duplicated elements, such as input linked list
a = "Head->1->2->1->3->2->NULL". After calling function Delete_Dupl_Node(a), the
new linked list will be "Head->1->2->3->NULL".




4. Write a program to reverse given linked list, like input linked list
a = "Head->1->2->3->NULL". Through calling function Reverse_Node(a), the new linked
list will be "Head->3->2->1->NULL".




5. From given a linked list with integer value nodes, calculate average value, for instance,
input linked list a = "Head->1->2->3->NULL". By calling function Average_List(a),
average value is (1+2+3) / 3=2.0 (floating data type).